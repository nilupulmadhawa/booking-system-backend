{"version":3,"file":"auth.js","names":["authRegister","first_name","last_name","email","password","profile_pic","getOneUser","userData","status","message","Promise","resolve","reject","bcrypt","hash","parseInt","process","env","BCRYPT_SALT_ROUNDS","err","encryptedPassword","createUser","registeredUser","authLogin","$or","username","user","compare","isPasswordMatch"],"sources":["../../src/services/auth.js"],"sourcesContent":["import bcrypt from 'bcrypt'\r\nimport { createUser, getOneUser } from '../repository/user'\r\n\r\nexport const authRegister = async ({ first_name, last_name, email, password, profile_pic }) => {\r\n    try {\r\n        let userData = await getOneUser({ email }, false)\r\n        if (userData) return { status: 422, message: 'Email is already taken' }\r\n        const encryptedPassword = await new Promise((resolve, reject) => {\r\n            bcrypt.hash(password, parseInt(process.env.BCRYPT_SALT_ROUNDS), (err, hash) => {\r\n                if (err) reject(err)\r\n                resolve(hash)\r\n            })\r\n        })\r\n        const registeredUser = await createUser({\r\n            first_name,\r\n            last_name,\r\n            email,\r\n            password: encryptedPassword,\r\n            profile_pic\r\n        })\r\n        return registeredUser\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const authLogin = async ({ email, password }) => {\r\n    try {\r\n        const user = await getOneUser({ $or: [{ email: email }, { username: email }] }, true)\r\n        if (!user) return false\r\n        const isPasswordMatch = await new Promise((resolve, reject) => {\r\n            bcrypt.compare(password, user.password, (err, hash) => {\r\n                if (err) reject(err)\r\n                resolve(hash)\r\n            })\r\n        })\r\n        if (!isPasswordMatch) return false\r\n        delete user.password\r\n        return user\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA;AACA;AAA2D;AAAA,+CAA3D;AAAA;AAAA;AAEO,IAAMA,YAAY;EAAA,uEAAG;IAAA;IAAA;MAAA;QAAA;UAASC,UAAU,QAAVA,UAAU,EAAEC,SAAS,QAATA,SAAS,EAAEC,KAAK,QAALA,KAAK,EAAEC,QAAQ,QAARA,QAAQ,EAAEC,WAAW,QAAXA,WAAW;UAAA;UAAA;UAAA,OAE3D,IAAAC,gBAAU,EAAC;YAAEH,KAAK,EAALA;UAAM,CAAC,EAAE,KAAK,CAAC;QAAA;UAA7CI,QAAQ;UAAA,KACRA,QAAQ;YAAA;YAAA;UAAA;UAAA,iCAAS;YAAEC,MAAM,EAAE,GAAG;YAAEC,OAAO,EAAE;UAAyB,CAAC;QAAA;UAAA;UAAA,OACvC,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;YAC7DC,kBAAM,CAACC,IAAI,CAACV,QAAQ,EAAEW,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAC,EAAE,UAACC,GAAG,EAAEL,IAAI,EAAK;cAC3E,IAAIK,GAAG,EAAEP,MAAM,CAACO,GAAG,CAAC;cACpBR,OAAO,CAACG,IAAI,CAAC;YACjB,CAAC,CAAC;UACN,CAAC,CAAC;QAAA;UALIM,iBAAiB;UAAA;UAAA,OAMM,IAAAC,gBAAU,EAAC;YACpCpB,UAAU,EAAVA,UAAU;YACVC,SAAS,EAATA,SAAS;YACTC,KAAK,EAALA,KAAK;YACLC,QAAQ,EAAEgB,iBAAiB;YAC3Bf,WAAW,EAAXA;UACJ,CAAC,CAAC;QAAA;UANIiB,cAAc;UAAA,iCAObA,cAAc;QAAA;UAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAI5B;EAAA,gBArBYtB,YAAY;IAAA;EAAA;AAAA,GAqBxB;AAAA;AAEM,IAAMuB,SAAS;EAAA,uEAAG;IAAA;IAAA;MAAA;QAAA;UAASpB,KAAK,SAALA,KAAK,EAAEC,QAAQ,SAARA,QAAQ;UAAA;UAAA;UAAA,OAEtB,IAAAE,gBAAU,EAAC;YAAEkB,GAAG,EAAE,CAAC;cAAErB,KAAK,EAAEA;YAAM,CAAC,EAAE;cAAEsB,QAAQ,EAAEtB;YAAM,CAAC;UAAE,CAAC,EAAE,IAAI,CAAC;QAAA;UAA/EuB,IAAI;UAAA,IACLA,IAAI;YAAA;YAAA;UAAA;UAAA,kCAAS,KAAK;QAAA;UAAA;UAAA,OACO,IAAIhB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;YAC3DC,kBAAM,CAACc,OAAO,CAACvB,QAAQ,EAAEsB,IAAI,CAACtB,QAAQ,EAAE,UAACe,GAAG,EAAEL,IAAI,EAAK;cACnD,IAAIK,GAAG,EAAEP,MAAM,CAACO,GAAG,CAAC;cACpBR,OAAO,CAACG,IAAI,CAAC;YACjB,CAAC,CAAC;UACN,CAAC,CAAC;QAAA;UALIc,eAAe;UAAA,IAMhBA,eAAe;YAAA;YAAA;UAAA;UAAA,kCAAS,KAAK;QAAA;UAClC,OAAOF,IAAI,CAACtB,QAAQ;UAAA,kCACbsB,IAAI;QAAA;UAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAIlB;EAAA,gBAhBYH,SAAS;IAAA;EAAA;AAAA,GAgBrB;AAAA"}